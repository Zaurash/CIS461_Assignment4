/* should -30 be MINUS special_rexpr instead of MINUS expr? */
/* none vs nothing */

import java_cup.runtime.*;
import java.util.*;

parser code {:

	int error_counter = 0;

    public void report_error(String message, Object info) {
	
		if (error_counter > 20){
		System.err.println("There are more than 20 errors");
		System.exit(1);
		}
		
		error_counter++;
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   

                if (s.right >= 0)                    

                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal			CLASS, DEF, EXTENDS, IF, ELIF, ELSE, WHILE, RETURN;
terminal			AND, OR, NOT, none;
terminal			PLUS, MINUS, TIMES, DIVIDE;
terminal			EQUALS, ATMOST, LESS, ATLEAST, MORE, EQUIV;
terminal			LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;
terminal			COMMA, SEMICOLON, DOT, COLON;
terminal Integer 	INT;
terminal String 	STRING, IDENT;

non terminal 				Program, Statement, Class, Class_Signature, Class_Body;
non terminal 				Formals, Formals_nonEmpty, Formal_Arg, Methods, Method, Actual_Args, Args_nonEmpty;
non terminal 				Return_Statement, Elif_Statement, Else_Statement;
non terminal Expr			R_Expr, L_Expr;
non terminal Ident			OptExtends;
non terminal LinkedList 	Classes, Statements, Statement_Block, Elif_Statements;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left EQUALS, EQUIV, ATMOST, ATLEAST, LESS, MORE, AND, OR, NOT;
precedence left DOT;


   Program 			::= Classes:c Statements:s {: c.add(new CLS("Obj", "Obj")); c.add(new CLS("String", "Obj")); c.add(new CLS("Nothing", "Obj")); c.add(new CLS("Int", "Obj")); RESULT = new Program(c,s); :}
   					;
					
   Statements		::= Statements:sts Statement:st {: sts.add(st); RESULT = sts; :}
   					|								{: RESULT = new LinkedList<Stmt>(); :}
					;
   
   Classes			::= Classes:cs Class:c 	{: cs.add(c); RESULT = cs; :}
   					|						{: RESULT = new LinkedList<CLS>(); :}
					;
   
   Class   			::= Class_Signature:sig Class_Body 	{: RESULT = sig; :}
   					;
   
   Class_Signature  ::= CLASS IDENT:i LPAREN Formals RPAREN OptExtends:oe 	{: RESULT = new CLS(i, oe.name); :}
   					;
					
   OptExtends		::= EXTENDS IDENT:i 	{: RESULT = new Ident(i); :}
   					|						{: Ident temp = new Ident("Obj"); RESULT = temp; :}
					;
					
   Class_Body		::= LBRACKET Statements Methods RBRACKET
   					;
					
   Statement_Block ::=	LBRACKET Statements:s RBRACKET								{: RESULT = s; :}
   					;
					
   Statement		::= IF R_Expr Statement_Block Elif_Statements Else_Statement
					|	WHILE R_Expr Statement_Block
					|	Return_Statement
					|	L_Expr COLON IDENT EQUALS R_Expr SEMICOLON
					|	L_Expr EQUALS R_Expr SEMICOLON
					|	R_Expr:r SEMICOLON											   {: if(r != null){RESULT = new Stmt(r, new LinkedList<Stmt>());} :}
					;
					
   Elif_Statements	::= Elif_Statements:stmts Elif_Statement:s							{: stmts.add(s); RESULT = stmts; :}
					|																	{: RESULT = new LinkedList<Stmt.IFBRANCH>(); :}
					;
		
   Elif_Statement	::=	ELIF R_Expr:r Statement_Block:s									{: RESULT = Stmt.ifbranch(r, s); :}
					;
					
   Else_Statement	::= ELSE Statement_Block:s											{: RESULT = Stmt.ifbranch(new Expr("True"), s); :}
   					|																	{: RESULT = new LinkedList<Stmt.IFBRANCH>(); :}
					;
			
   Return_Statement	::=	RETURN SEMICOLON
   					|	RETURN R_Expr SEMICOLON
					;
   
   Formals			::= Formals_nonEmpty
   					|	
   					;
					
   Formals_nonEmpty ::= Formals_nonEmpty COMMA Formal_Arg
   					|	Formal_Arg
					;
					
   Formal_Arg		::=	IDENT COLON IDENT
   					;
					
   Methods			::= Methods Method
   					|
					;
   
   Method			::= DEF IDENT LPAREN Formals RPAREN COLON IDENT Statement_Block
   					;
					
   Actual_Args		::= Args_nonEmpty
					|	
					;
					
   Args_nonEmpty	::= Args_nonEmpty COMMA R_Expr
					|	R_Expr
					;
					
	L_Expr			::= IDENT
					| 	R_Expr DOT IDENT
					;
	
	R_Expr			::= STRING:s 										{: RESULT = Expr.stringconst(s); :}
					|	INT:i											{: RESULT = Expr.intconst(i); :}
					| 	L_Expr:l										{: RESULT = l; :}
					|	R_Expr:r1 PLUS R_Expr:r2						{: RESULT = Expr.binop("PLUS", r1, r2); :}
					|	R_Expr:r1 MINUS R_Expr:r2						{: RESULT = Expr.binop("MINUS", r1, r2); :}
					|	R_Expr:r1 TIMES R_Expr:r2						{: RESULT = Expr.binop("TIMES", r1, r2); :}			
					|	R_Expr:r1 DIVIDE R_Expr:r2						{: RESULT = Expr.binop("DIVIDE", r1, r2); :}
					|	MINUS INT:i										{: int temp = i * -1; RESULT = Expr.intconst(temp); :}
					|	LPAREN R_Expr RPAREN
					|	R_Expr EQUALS R_Expr
					|	R_Expr EQUIV R_Expr
					| 	R_Expr ATMOST R_Expr
					| 	R_Expr ATLEAST R_Expr
					| 	R_Expr LESS R_Expr
					| 	R_Expr MORE R_Expr
					| 	R_Expr AND R_Expr
					| 	R_Expr OR R_Expr
					| 	R_Expr NOT R_Expr
					|	R_Expr DOT IDENT LPAREN Actual_Args RPAREN
					|	IDENT:i LPAREN Actual_Args:a RPAREN					{: RESULT = new Expr(i, new LinkedList<Expr>()); :}
					;
					

					
					
					